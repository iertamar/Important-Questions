import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
    	 Scanner sc = new Scanner(System.in);
    	 int t = sc.nextInt();
    	 while(t-->0)
    	 {
    	     int n = sc.nextInt();
    	     int a[] = new int[n];
    	     for(int i = 0; i<n ; i++)
    	     {
    	         a[i] = sc.nextInt();
    	     }
    	     int k = sc.nextInt();
    	     int ans = kthSmallestElement(a , 0 , n-1 , k);
    	     System.out.println(ans);
    	 }
	}
	static int kthSmallestElement(int a[] , int l , int r, int k)
	{
	    if(k>0 && k<=r-l+1)
	    {
	        int x;
	        int n = r-l+1;
	        if(n%5==0)
	        x = n/5 ; 
	        else
	        x = (n/5) + 1;
	        int median[] = new int[x];
	        int y =0 , z;
	       // System.out.println(l);
	        for(int i = l; i<=r; i = i+5)
	        {
	            if(i+4 <=r)
	            {
	                Arrays.sort(a , i , i+5);
	                median[y++] = a[i+2];
	            }
	            else if(i<=r)
	            {
	            Arrays.sort(a , i , r+1);
	            z = r - ((r+1-i)/2)  ;
	            median[y++] = a[z];
	            }
	        }
	     z =0;
	    Arrays.sort(median);
	   if(median.length%2==0)
	   z = median.length/2 -1;
	   else
	   z = median.length/2 ;
	  // System.out.println(median[z]);
	   int pos = partition(a , l , r , median[z]);
	   //System.out.println(pos);
	   if(pos-l == k-1)
	   return a[pos];
	   if(pos-l > k-1)
	   return kthSmallestElement(a , l , pos-1 , k);
	   return kthSmallestElement(a , pos +1 , r , k-pos+l-1);
	    }
	    return Integer.MAX_VALUE;
	}
	
  static int partition(int arr[], int l, int r, int x)
{
    // Search for x in arr[l..r] and move it to end
    int i , temp;
    for (i=l; i<r; i++)
        if (arr[i] == x)
           break;
    //swap(arr[i], arr[r]);
    temp = arr[i];
    arr[i] = arr[r];
    arr[r] = temp;
 
    // Standard partition algorith
    i = l;
    for (int j = l; j <= r - 1; j++)
    {
        if (arr[j] <= x)
        {
            //swap(&arr[i], &arr[j]);
            temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++;
        }
    }
    //swap(&arr[i], &arr[r]);
            temp = arr[i];
            arr[i] = arr[r];
            arr[r] = temp;
    return i;
}
}
