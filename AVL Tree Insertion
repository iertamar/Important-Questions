class GfG{
    public Node insertToAVL(Node node,int data)
    {
          if(node==null)
          return new Node(data);
          if(data < node.data)
          node.left = insertToAVL(node.left , data);
          else if(data > node.data)
          node.right = insertToAVL(node.right , data);
          else // if equal then we will not insert
          return node;
          
          
          node.height = 1 + Math.max(height(node.left) , height(node.right));
          
          
          int bf = getBalance(node);
          //LL CASE
          if(bf > 1 && data<node.left.data)
          return rightRotate(node);
          
          //RR CASE
          if(bf < -1 && data<node.right.data)
          return leftRotate(node);
          
          //LR CASE
          if(bf > 1 && data > node.left.data)
          {
          node.left = leftRotate(node.left);
          return rightRotate(node);
          }
          
          //RL CASE
          if(bf < -1 && data < node.right.data)
          {
              node.right = rightRotate(node.right);
              return leftRotate(node);
          }
          return node ; 
    }
    
    
    Node rightRotate(Node y)
    {
        Node x = y.left ;
        Node t2 = x.right;
        
        x.right = y;
        y.left = t2 ;
        
        y.height = Math.max(height(y.left) , height(y.right) ) + 1 ;
        x.height = Math.max(height(x.left) , height(x.right) ) + 1 ;
        return x;
    }
    
    Node leftRotate(Node x)
    {
        Node y = x.right;
        Node t2 = y.left;
        
        y.left = x;
        x.right = t2;
        
        x.height = Math.max(height(x.left) , height(x.right)) + 1;
        y.height = Math.max(height(y.left) , height(y.right)) + 1;
        return y;
    }
    
    
    int getBalance(Node N)
    {
        if(N==null)
        {
            return 0;
        }
        return height(N.left) - height(N.right);
    }
    int height(Node N)
    {
        if(N==null)
        {
            return 0;
        }
        return N.height;
    }
}
